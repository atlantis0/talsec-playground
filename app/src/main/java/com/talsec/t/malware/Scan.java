package com.talsec.t.malware;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.util.Log;

import androidx.annotation.Keep;

import com.talsec.t.Utils;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * Quick & Dirty implementation of Yara Signature Scan
 * for detecting malicious samples
 *
 */
public class Scan {

    private static final String TAG = Scan.class.getSimpleName();

    private static final String RULES_ASSET_DIRECTORY = "rules";
    private static final String RULES_SANDBOX_DIRECTORY = "rules";

    private final Context context;
    private final String packageName;
    private final List<File> rules;

    public Scan(Context context, String packageName) {
        this.context = context;
        this.packageName = packageName;
        this.rules = new ArrayList<>();

        this.loadLib();
    }

    private void loadLib() {
        System.loadLibrary("scan");
    }

    /**
     *
     * Copy sample Yara rules from asset into the application's sandbox dir
     * @throws IOException
     */
    private void copyRulesFromAsset() throws IOException {
        File sandboxDexRuleDir = new File(context.getFilesDir(), RULES_SANDBOX_DIRECTORY);
        sandboxDexRuleDir.mkdirs();

        String [] assetRules = this.context.getAssets().list(RULES_ASSET_DIRECTORY);
        if(assetRules != null) {
            for (String ru : assetRules) {
                File rulePath = new File(sandboxDexRuleDir, ru);
                if(!rulePath.exists()) {
                    InputStream inputStream = this.context.getAssets().open(RULES_ASSET_DIRECTORY + "/" + ru);
                    Utils.Copy(inputStream, rulePath);
                    inputStream.close();
                }
                rules.add(rulePath);
            }
        }
    }


    /**
     *
     * Start signature scan
     *
     * @throws PackageManager.NameNotFoundException
     * @throws IOException
     */
    public void verify() throws PackageManager.NameNotFoundException, IOException {

        this.copyRulesFromAsset();

        ApplicationInfo info = this.context.getPackageManager().getApplicationInfo(this.packageName, 0);
        String apkPath = info.sourceDir;

        for(int i=0; i<rules.size(); i++) {
            int status = this.check(this.packageName, apkPath, rules.get(i).getAbsolutePath());
            if(status == -1) {
                // check returns error
                Log.e(TAG, String.format("Unable to scan %s with %s", this.packageName, rules.get(i).getAbsolutePath()));
            }
        }

    }

    @Keep
    /**
     *
     * Called by the native component whenever there is a match
     *
     */
    private void result(String packageName, String filePath, String ruleName) {
        Log.d(TAG, String.format("Rule %s matches this file %s from app (%s)", ruleName, filePath, packageName));
    }

    /**
     *
     * Signature match is done at the native layer
     *
     * @param packageName package name
     * @param fileToCheckPath path to apk/dex to run the check on
     * @param ruleFile rule file
     * @return status -1 if there is an error or 0 during success
     */
    public native int check(String packageName, String fileToCheckPath, String ruleFile);
}
